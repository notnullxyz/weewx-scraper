<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WeeWx Weather Scraper</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
        }
        .container {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h3 {
            margin-bottom: 20px;
        }
        .gauge {
			text-align: center;
            width: 200px;
            height: 200px;
            margin-right: auto;
			margin-left: auto;
        }
        .value-info {
            font-size: 0.8em;
            margin-top: -10px;
            margin-right: auto;
            margin-left: auto;
	    text-align: center;

        }
        .timer {
            margin-top: 20px;
        }
        .timer label {
            margin-right: 10px;
        }
        .timer input {
            width: 50px;
            text-align: center;
        }
    </style>
    <script src="gauge.min.js"></script>
</head>
<body>
    <div class="container">
        <h3>Retrieving from <a href='https://your.weewx.url'>your.weewx.url</a>, hopefully</h3>
        
	<table>
		<th>Temperature</th>
		<th>Rain</th>
		<th>Wind</th>
	<tr>
        <td id="tempGauge" class="gauge"></td>
        <td id="rainGauge" class="gauge"></td>
		<td id="windGauge" class="gauge"></td>
	</tr>
	<tr>
        <td id="tempInfo" class="value-info"></td>
        <td id="rainInfo" class="value-info"></td>
		<td id="windInfo" class="value-info"></td>
	</tr>
	</table>
	
    <div class="timer">
		<label for="refreshInterval">Refresh Interval (seconds):</label>
			<input type="number" id="refreshInterval" value="30" min="15" max="120">
    </div>
    <div id="countdown">Refreshing in 30</div>
    </div>

    <script>
        const tempGauge = Gauge(document.getElementById("tempGauge"), {
            max: 50,
            dialStartAngle: 90,
            dialEndAngle: 0,
            value: 0,
            label: function(value) { return value.toFixed(1) + 'Â°C'; },
            color: function(value) {	
					// Set some values and colors here to give a feel of seriousness... 
                if (value < 12) {
                    return "#1c5e91";
                } else if (value < 30) {
                    return "#6f20b0";
                } else {
                    return "#bd4e26";
                }
            }
        });

        const rainGauge = Gauge(document.getElementById("rainGauge"), {
            max: 100,
            dialStartAngle: 90,
            dialEndAngle: 0,
            value: 0,
            label: function(value) { return value.toFixed(1) + ' mm'; },
            color: function(value) {
				// same as tempGuage: Set some values and colors here to give a feel of seriousness... 
                if (value < 5) {
                    return "#3bb363";
                } else if (value < 10) {
                    return "#a83e7e";
				} else if (value < 15) {
							return "#de3772";
				} else if (value < 20) {
                    return "#ad3d4c";
                } else {
                    return "#bf4900";
                }
            }
        });

        const windGauge = Gauge(document.getElementById("windGauge"), {
            max: 100,
            dialStartAngle: 90,
            dialEndAngle: 0,
            value: 0,
            label: function(value) { return value.toFixed(1) + ' km/h'; },
            color: function(value) {
				// same as tempGuage: Set some values and colors here to give a feel of seriousness... 
                if (value < 10) {
                    return "#5ee432";
                } else if (value < 20) {
                    return "#fffa50";
                } else {
                    return "#ef4655";
                }
            }
        });

        const tempInfo = document.getElementById('tempInfo');
        const rainInfo = document.getElementById('rainInfo');
        const windInfo = document.getElementById('windInfo');

        const countdownElement = document.getElementById('countdown');
        const refreshIntervalInput = document.getElementById('refreshInterval');

        let refreshInterval = parseInt(refreshIntervalInput.value);
        let countdown = refreshInterval;

        refreshIntervalInput.addEventListener('change', () => {
            refreshInterval = Math.min(Math.max(parseInt(refreshIntervalInput.value), 20), 120);	// a limit, but any fewl with inspect can override this...
            countdown = refreshInterval;
        });

        async function fetchWeatherData() {
            try {
                const response = await fetch('https://weewx.simple-earth.org/');
                const text = await response.text();

                const outtempMatch = text.match(/<span class="outtemp">([^<]+)<\/span>/);			// current outside temp
                const outtempHighMatch = text.match(/<td class="high">([^<]+)<\/td>/);				// the max temp
                const outtempLowMatch = text.match(/<td class="border-left.low">([^<]+)<\/td>/);	// the minimum day temp

                const dayRainMatch = text.match(/<span class="dailystatsrain">([^<]+)<\/span>/);	// from the table below, todays rain
                const curwindspeedMatch = text.match(/<span class="curwindspeed">([^<]+)<\/span>/);	// current wind speed
                const curwindgustMatch = text.match(/<span class="curwindgust">([^<]+)<\/span>/);	// gust

                const tempValue = outtempMatch ? parseFloat(outtempMatch[1]) : 0;
                const tempHighValue = outtempHighMatch ? parseFloat(outtempHighMatch[1]) : 0;
                const tempLowValue = outtempLowMatch ? parseFloat(outtempLowMatch[1]) : 0;

                const rainValue = dayRainMatch ? parseFloat(dayRainMatch[1]) : 0;

                const windValue = curwindspeedMatch ? parseFloat(curwindspeedMatch[1]) : 0;
                const windGustValue = curwindgustMatch ? parseFloat(curwindgustMatch[1]) : 0;

                tempGauge.setValue(tempValue);
                rainGauge.setValue(rainValue);
                windGauge.setValue(windValue);

                tempInfo.innerHTML = `Max: ${tempHighValue.toFixed(1)}Â°C, Min: ${tempLowValue.toFixed(1)}Â°C`;
                rainInfo.innerHTML = `Rain: ${rainValue.toFixed(1)} mm`;
                windInfo.innerHTML = `Gust: ${windGustValue.toFixed(1)} km/h`;
            } catch (error) {
                console.error('Problem getting that :data:', error);		// cors/mime etc issues will be vomited out here
            }
        }

        function startTimer() {	// stole this function from somewhere
            countdownElement.innerText = `Next update in: ${countdown} seconds`;
            const timer = setInterval(() => {
                countdown--;
                countdownElement.innerText = `Next update in: ${countdown} seconds`;
                if (countdown <= 0) {
                    clearInterval(timer);
                    fetchWeatherData();
                    countdown = refreshInterval;
                    startTimer();
                }
            }, 1000);
        }

        fetchWeatherData();
        startTimer();
    </script>
</body>
</html>

